left_join(income, by = "name") %>%
left_join(labor, by = "name")
names(educ)
area_data <- educ %>%
left_join(homeown, by = "name")
left_join(income, by = "name")
View(educ)
View(income)
income<-get_acs(my_geo,
variables=var_list,
output="wide",
year=2019)
View(income)
#median income df by county
var_list<-paste0("B19013_",c("001"))
income<-get_acs(my_geo,
variables=var_list,
output="wide",
year=2019)
View(income)
names(income) <- tolower(names(income))
View(income)
income = subset(income, select = b19013_001m)
View(labor)
View(income)
income = subset(income, select = -b19013_001m)
View(income)
#median income df by county
var_list<-paste0("B19013_",c("001"))
income<-get_acs(my_geo,
variables=var_list,
output="wide",
year=2019)
names(income) <- tolower(names(income))
View(income)
income = subset(income, select = b19013_001m)
#median income df by county
var_list<-paste0("B19013_",c("001"))
income<-get_acs(my_geo,
variables=var_list,
output="wide",
year=2019)
names(income) <- tolower(names(income))
income = subset(income, select = -b19013_001m)
View(income)
#median income df by county
var_list<-paste0("B19013_",c("001"))
income<-get_acs(my_geo,
variables=var_list,
output="wide",
year=2019)
names(income) <- tolower(names(income))
income = subset(income, select = -c(b19013_001m, geoid))
View(income)
names(income)[names(income)=='b19013_001m'] <- 'median income'
View(income)
names(income)[names(income)=='b19013_001e'] <- 'median income'
View(income)
area_data <- educ %>%
left_join(homeown, by = "name")
View(area_data)
left_join(income, by = "name")
left_join(labor, by = "name")
View(homeown)
View(income)
area_data <- educ %>%
left_join(homeown, by = "name")
left_join(income, by = "name")
class(income$`median income`)
class(income$name)
class(educ$name)
class(educ$college_educ)
inner_join(income, by = "name")
area_data <- area_data %>%
left_join(income, by = "name")
View(area_data)
area_data <- area_data %>%
left_join(labor, by = "name")
View(area_data)
names(area_data)[names(area_data)=='college_educ'] <- '% college educated'
names(area_data)[names(area_data)=='perc_homeown'] <- '% of homeowners'
names(area_data)[names(area_data)=='perc_in_labor_force'] <- '% in labor force'
View(df_modified)
rm(degrees_plot)
rm(df_modified)
rm(df_modified_box)
View(df_new)
rm(df_new)
rm(health)
rm(mobility)
rm(commute)
rm(var_list_income1)
rm(var_list_income2)
rm(filtered_box)
rm(filtered)
rm(earnings_mdn)
rm(earnings_mdn_box)
series <- get_series('SMU19197802023800001')
table <- data_as_table(series$data)
library(blsR)
series <- get_series('SMU19197802023800001')
table <- data_as_table(series$data)
View(table)
series <- get_series('SMU48101802023800001')
table <- data_as_table(series$data)
installed.packages('bls_api')
install.packages('bls_api')
install.packages('get_bls_county')
install.packages('blscrapeR')
library(blsAPI)
series <- blsAPI('SMU19197802023800001')
table <- data_as_table(series$data)
library(blsR)
table <- data_as_table(series$data)
table <- data_as_table(series)
devtools::install_github("keberwein/blscrapeR")
ids <- search_ids(keyword = c("Labor Force", "Los Angeles"))
library(blscrapeR)
ids <- search_ids(keyword = c("Labor Force", "Los Angeles"))
head(ids)
ids <- search_ids(keyword = c("Abilene", "Texas", "Industry"))
head(ids)
ids <- search_ids(keyword = c("Industry", "Abilene"))
df <- bls_api(c('SMU19197802023800001'),
startyear = 2019, endyear = 2020)
View(df)
## ---------------------------
## libraries
## ---------------------------
library(knitr)
library(tidyverse)
library(haven)
library(pastecs)
library(psych)
## ---------------------------
## settings/macros
## ---------------------------
## NB:
## - echo (FALSE): don't repeat this code in output
## - include (FALSE): run code, but don't include output (unless a plot)
## - message (FALSE): don't output any messages
## - warning (FALSE): don't output any warnings
## - error (FALSE: don't output any errors
##
## We'll include these in the general knitr::opts_chunk() below, but
## need them here to silence unnecessary output before we can set the options
## set up knitr options
opts_chunk$set(error = FALSE,
echo = FALSE,
include = FALSE,
message = FALSE,
warning = FALSE,
fig.path = "../figures/ts-", # where figures should be stored
dpi = 300,                   # print quality (300 standard for print)
out.width = "100%",          # figures should be as wide as margins
comment = NA)                # if code output, no comment char on LHS
## ---------------------------
## directory paths
## ---------------------------
## read in our data here, assuming we're in scripts like always
data_directory_path <- file.path("..", "data")
par_expct <- df_new %>% ggplot(mapping = aes(x = par_ed_expct)) +
facet_wrap(~as_factor(region)) +
geom_histogram(binwidth = 1,
colour = "black",
alpha = 0.5,
position = "identity") +
scale_x_continuous(breaks = 1:11) +
scale_fill_discrete(name = "Expectation") +
labs(title = "Educational expectations for students",
subtitle = "(Variables: par_ed_expct, stu_ed_expct)",
caption = "Data from NCES HSLS09",
x = "Parent & student expectations",
y = "Number of observations in sample")
df_new <- df %>% select(student_id, stud_ed_expct, region)
## ---------------------------
## libraries
## ---------------------------
library(knitr)
library(tidyverse)
library(haven)
library(pastecs)
library(psych)
## ---------------------------
## settings/macros
## ---------------------------
## NB:
## - echo (FALSE): don't repeat this code in output
## - include (FALSE): run code, but don't include output (unless a plot)
## - message (FALSE): don't output any messages
## - warning (FALSE): don't output any warnings
## - error (FALSE: don't output any errors
##
## We'll include these in the general knitr::opts_chunk() below, but
## need them here to silence unnecessary output before we can set the options
## set up knitr options
opts_chunk$set(error = FALSE,
echo = FALSE,
include = FALSE,
message = FALSE,
warning = FALSE,
fig.path = "../figures/ts-", # where figures should be stored
dpi = 300,                   # print quality (300 standard for print)
out.width = "100%",          # figures should be as wide as margins
comment = NA)                # if code output, no comment char on LHS
## ---------------------------
## directory paths
## ---------------------------
## read in our data here, assuming we're in scripts like always
data_directory_path <- file.path("..", "data")
## ---------------------------
## input
## ---------------------------
df <- read_dta(file.path(data_directory_path, "hsls_small.dta"))
## cleaning the data
colnames(df) <- c("student_id",
"sex",
"race",
"st_dob",
"mat_score",
"parent_educ",
"hh_members",
"fam_income",
"poverty_185",
"ses",
"stud_ed_expct",
"par_ed_expct",
"region",
"hs_status",
"college_attend",
"time_between_HSCol")
## ---------------------------
## summary statistics table (by region)
## ---------------------------
df_tab <- df %>%
select(ses, mat_score, time_between_HSCol, par_ed_expct, stud_ed_expct, parent_educ, region)
summ <- describeBy(df_tab, df_tab$region) %>%
list2env(envir=.GlobalEnv)
region_1_table <- `1`
region_2_table <- `2`
region_3_table <- `3`
region_4_table <- `4`
rm(ls = '1', '2', '3', '4')
### REGION 1 ###
region_1_table <- region_1_table %>%
select(-c(trimmed, mad, kurtosis, n, vars)) %>%
slice(-c(7))
means_stu <- region_1_table %>%
filter(rownames(region_1_table) == 'stud_ed_expct') %>%
pull(mean)
means_par <- region_1_table %>%
filter(rownames(region_1_table) == 'par_ed_expct')  %>%
pull(mean)
kable(region_1_table,
digits = 4,
col.names = c("Mean", "SD", "Median", "Minimum", "Maximum", "Range", "Skew", "SE"), caption = "Region 1")
### REGION 2 ###
region_2_table <- region_2_table %>%
select(-c(trimmed, mad, kurtosis, n, vars)) %>%
slice(-c(7))
means_stu_2 <- region_2_table %>%
filter(rownames(region_2_table) == 'stud_ed_expct') %>%
pull(mean)
means_par_2 <- region_2_table %>%
filter(rownames(region_2_table) == 'par_ed_expct')  %>%
pull(mean)
kable(region_2_table,
digits = 4,
col.names = c("Mean", "SD", "Median", "Minimum", "Maximum", "Range", "Skew", "SE"), caption = "Region 2")
### REGION 3 ###
region_3_table <- region_3_table %>%
select(-c(trimmed, mad, kurtosis, n, vars)) %>%
slice(-c(7))
means_stu_3 <- region_3_table %>%
filter(rownames(region_3_table) == 'stud_ed_expct') %>%
pull(mean)
means_par_3 <- region_3_table %>%
filter(rownames(region_3_table) == 'par_ed_expct')  %>%
pull(mean)
kable(region_3_table,
digits = 4,
col.names = c("Mean", "SD", "Median", "Minimum", "Maximum", "Range", "Skew", "SE"), caption = "Region 3")
### REGION 4 ###
region_4_table <- region_4_table %>%
select(-c(trimmed, mad, kurtosis, n, vars)) %>%
slice(-c(7))
means_stu_4 <- region_4_table %>%
filter(rownames(region_4_table) == 'stud_ed_expct') %>%
pull(mean)
means_par_4 <- region_4_table %>%
filter(rownames(region_4_table) == 'par_ed_expct')  %>%
pull(mean)
kable(region_4_table,
digits = 4,
col.names = c("Mean", "SD", "Median", "Minimum", "Maximum", "Range", "Skew", "SE"), caption = "Region 4")
## ---------------------------
## figures
## ---------------------------
df_new <- df %>% select(student_id, stud_ed_expct, region)
stu_expct <- df_new %>% ggplot(mapping = aes(x = stud_ed_expct)) +
facet_wrap(~as_factor(region)) +
geom_histogram(binwidth = 1,
colour = "black",
alpha = 0.5,
position = "identity") +
scale_x_continuous(breaks = 1:11) +
scale_fill_discrete(name = "Expectation") +
labs(title = "Educational expectations for students",
subtitle = "(Variables: par_ed_expct, stu_ed_expct)",
caption = "Data from NCES HSLS09",
x = "Parent & student expectations",
y = "Number of observations in sample")
stu_expct
par_expct <- df_new %>% ggplot(mapping = aes(x = par_ed_expct)) +
facet_wrap(~as_factor(region)) +
geom_histogram(binwidth = 1,
colour = "black",
alpha = 0.5,
position = "identity") +
scale_x_continuous(breaks = 1:11) +
scale_fill_discrete(name = "Expectation") +
labs(title = "Educational expectations for students",
subtitle = "(Variables: par_ed_expct, stu_ed_expct)",
caption = "Data from NCES HSLS09",
x = "Parent & student expectations",
y = "Number of observations in sample")
par_expct
## ---------------------------
## libraries
## ---------------------------
library(knitr)
library(tidyverse)
library(haven)
library(pastecs)
library(psych)
## ---------------------------
## settings/macros
## ---------------------------
## NB:
## - echo (FALSE): don't repeat this code in output
## - include (FALSE): run code, but don't include output (unless a plot)
## - message (FALSE): don't output any messages
## - warning (FALSE): don't output any warnings
## - error (FALSE: don't output any errors
##
## We'll include these in the general knitr::opts_chunk() below, but
## need them here to silence unnecessary output before we can set the options
## set up knitr options
opts_chunk$set(error = FALSE,
echo = FALSE,
include = FALSE,
message = FALSE,
warning = FALSE,
fig.path = "../figures", # where figures should be stored
dpi = 300, # print quality (300 standard for print)
fig.height = 5,
fig.width = 5,
out.width = "100%",          # figures should be as wide as margins
comment = NA)                # if code output, no comment char on LHS
## ---------------------------
## directory paths
## ---------------------------
## read in our data here, assuming we're in scripts like always
data_directory_path <- file.path("..", "data")
## ---------------------------
## libraries
## ---------------------------
library(knitr)
library(tidyverse)
library(haven)
library(pastecs)
library(psych)
## ---------------------------
## settings/macros
## ---------------------------
## NB:
## - echo (FALSE): don't repeat this code in output
## - include (FALSE): run code, but don't include output (unless a plot)
## - message (FALSE): don't output any messages
## - warning (FALSE): don't output any warnings
## - error (FALSE: don't output any errors
##
## We'll include these in the general knitr::opts_chunk() below, but
## need them here to silence unnecessary output before we can set the options
## set up knitr options
opts_chunk$set(error = FALSE,
echo = FALSE,
include = FALSE,
message = FALSE,
warning = FALSE,
fig.path = "../figures", # where figures should be stored
dpi = 300, # print quality (300 standard for print)
out.width = "100%",          # figures should be as wide as margins
comment = NA)                # if code output, no comment char on LHS
## ---------------------------
## directory paths
## ---------------------------
## read in our data here, assuming we're in scripts like always
data_directory_path <- file.path("..", "data")
## ---------------------------
## input
## ---------------------------
df <- read_dta(file.path(data_directory_path, "hsls_small.dta"))
## cleaning the data
colnames(df) <- c("student_id",
"sex",
"race",
"st_dob",
"mat_score",
"parent_educ",
"hh_members",
"fam_income",
"poverty_185",
"ses",
"stud_ed_expct",
"par_ed_expct",
"region",
"hs_status",
"college_attend",
"time_between_HSCol")
df <- df %>%
mutate(stud_ed_expct = ifelse(stud_ed_expct  %in%  c(-8, 11), NA, stud_ed_expct)) %>%
mutate(par_ed_expct = ifelse(par_ed_expct  %in%  c(-8, 11), NA, par_ed_expct)) %>%
drop_na(par_ed_expct, stud_ed_expct)
df <- read_dta(file.path(data_directory_path, "hsls_small.dta"))
################################################################################
##
## PROJ: Population Centers
## FILE: popcenters.r
## AUTH: Benjamin Skinner (updated by Olivia Morales)
## INIT: 26 October 2014 (up. 17 March 2022)
##
################################################################################
## PURPOSE #####################################################################
##
## This file is used to create a matrix that gives the population centers for
## each county in 2000 and 2010. The data are already collected by the U.S.
## Census Bureau; this script just puts the files together.
##
## Raw data files come from U.S. Census files for 2000 and 2010:
##
## 2000: ftp://ftp.census.gov/geo/docs/reference/cenpop2000/county
## 2010: ftp://ftp.census.gov/geo/docs/reference/cenpop2010/county
##
################################################################################
## fixed up column name that was causing trouble in subsequent functions
## clear memory
rm(list=ls())
## libraries
library(tidyverse)
libs <- c('dplyr','RCurl','readr')
lapply(libs, require, character.only=TRUE)
## directories
ddir <- '../data/'
################################################################################
## CENTERS: 2000 AND 2010
################################################################################
## raw file directory; files
urldir <- 'ftp://ftp.census.gov/geo/docs/maps-data/data/gazetteer/'
url1 <- paste0(urldir, 'county2k.zip');
url2 <- paste0(urldir, 'Gaz_counties_national.zip')
## set up temp folders and download
temp1 <- tempfile(); download.file(url1, temp1)
temp2 <- tempfile(); download.file(url2, temp2)
fw <- fwf_widths(c(72,8,9,14,14,12,12,10,11))
## read; fixed width for 2000; tab delimited for 2010
cen00 <- read_fwf(unz(temp1, 'county2k.txt', open='rb'),
col_positions =fw,
locale = locale(encoding = "LATIN1"))
cen10 <- read_delim(unz(temp2, 'Gaz_counties_national.txt', open='rb'),
delim='\t')
## clean
cen00 <- cen00 %>%
mutate(fips = substr(cen00$X1,3,7)) %>%
select(fips, X9, X8) %>%
rename(clon00 = X9,
clat00 = X8)
View(cen00)
View(cen10)
## stopping point
cen10 <- cen10 %>%
select(GEOID, INTPTLONG, INTPTLAT) %>%
rename(fips = GEOID,
clon10 = INTPTLONG,
clat10 = INTPTLAT)
View(cen10)
View(cen10)
## renamed all columns b/c INTPTLONG had a ` in front of it
colnames(cen10) <- c("USPS",
"GEOID",
"ANSICODE",
"NAME",
"POP10",
"HU10",
"ALAND",
"AWATER",
"ALAND_SQMI",
"AWATER_SQMI",
"INTPTLAT",
"INTPTLONG")
## stopping point
cen10 <- cen10 %>%
select(GEOID, INTPTLONG, INTPTLAT) %>%
rename(fips = GEOID,
clon10 = INTPTLONG,
clat10 = INTPTLAT)
View(cen10)
install.packages('bookdown')
setwd("~/Desktop/UF/cc_earn/ashe_proposal")
installed.packages()
install.packages('biblatex')
install.packages('bibtex')
